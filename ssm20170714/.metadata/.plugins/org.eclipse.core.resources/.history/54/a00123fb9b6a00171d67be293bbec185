package cn.gqxqd.factory;
import net.sf.cglib.proxy.InvocationHandler;
import net.sf.cglib.proxy.Proxy;
import cn.gqxqd.service.IUserService;
import cn.gqxqd.service.impl.UserServiceImpl;

public class MyBeanFactory {
	public static IUserService createService(){
	final IUserService userService=new UserServiceImpl();
	final MyAspect myAspect = new MyAspect();
	IUserService proxService = (IUserService)Proxy.newProxyInstance(
			MyBeanFactory.class.getClassLoader(), 
			userService.getClass().getInterfaces(), 
			new InvocationHandler() {
				
				@Override
				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
					
					//执行前
					myAspect.before();
					
					//方法执行时
					Object obj = method.invoke(userService, args);
					
					//执行后
					myAspect.after();
					
					return obj;
				}
			});

                 return proxService;
}
}
